#!/bin/zsh

# Automates the creation of a new target

# USAGE:
# % ./add_target [target-name] [language]
# 
# Example: creates target `Hello-World` with C source files
# % ./add_target Hello-World c
#
# language: c, cpp, swift
#

if [ -z $2 ]
then
    echo "\nUSAGE:\n\t% ./add_target [target-name] [language-file-extension]\n"
    echo "[language-file-extension]: c, cpp, m, mm, swift"
    exit
fi

DESIRED_TARGET_NAME=$1
EXT=$2

TEMPLATE_DIR="./__target_templates__"

TARGET_TEMPLATE_C="$TEMPLATE_DIR/ConsoleProgramC"
TARGET_TEMPLATE_CPP="$TEMPLATE_DIR/ConsoleProgramCpp"
TARGET_TEMPLATE_OBJC="$TEMPLATE_DIR/ConsoleProgramObjC"
TARGET_TEMPLATE_OBJCPP="$TEMPLATE_DIR/ConsoleProgramObjCpp"
TARGET_TEMPLATE_SWIFT="$TEMPLATE_DIR/ConsoleProgramSwift"

if [ $EXT = "c" ]
then
    TARGET_PROTOTYPE=$TARGET_TEMPLATE_C
elif [ $EXT = "cpp" ]
then
    TARGET_PROTOTYPE=$TARGET_TEMPLATE_CPP
elif [ $EXT = "m" ]
then
    TARGET_PROTOTYPE=$TARGET_TEMPLATE_OBJC
elif [ $EXT = "mm" ]
then
    TARGET_PROTOTYPE=$TARGET_TEMPLATE_OBJCPP
elif [ $EXT = "swift" ]
then
    TARGET_PROTOTYPE=$TARGET_TEMPLATE_SWIFT
else
    echo "[Error, argument $EXT is not supported.]"
    exit
fi

CMAKE_DIR="./src/$DESIRED_TARGET_NAME"
CMAKE_DEST="$CMAKE_DIR/CMakeLists.txt"

## Create a new source directory
## from $TARGET_PROTOTYPE
cp -R $TARGET_PROTOTYPE $CMAKE_DIR
echo "[Created new directory $CMAKE_DIR]"

## Append the path of the newly created directory to CMakeLists.txt
echo "add_subdirectory("./$DESIRED_TARGET_NAME")" >> "src/CMakeLists.txt"
echo "[Added $DESIRED_TARGET_NAME to src/CMakeLists.txt]"

## Modify the CMakeLists.txt file in ./$DESIRED_TARGET_NAME
## so that the executable has the name $DESIRED_TARGET_NAME
if [ $EXT = "c" ]
then
    echo "add_library($DESIRED_TARGET_NAME-library source.c header.h)" > $CMAKE_DEST
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_include_directories($DESIRED_TARGET_NAME-library PUBLIC ${CMAKE_CURRENT_SOURCE_DIRECTORY})" >> $CMAKE_DEST
    echo "add_executable($DESIRED_TARGET_NAME main.c)" >> $CMAKE_DEST
    echo "add_compile_options($DESIRED_TARGET_NAME PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_link_libraries($DESIRED_TARGET_NAME LINK_PUBLIC $DESIRED_TARGET_NAME-library)" >> $CMAKE_DEST
elif [ $EXT = "cpp" ]
then
    echo "add_library($DESIRED_TARGET_NAME-library source.cpp header.hpp)" >  "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_include_directories($DESIRED_TARGET_NAME-library PUBLIC ${CMAKE_CURRENT_SOURCE_DIRECTORY})" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_executable($DESIRED_TARGET_NAME main.cpp)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_link_libraries($DESIRED_TARGET_NAME LINK_PUBLIC $DESIRED_TARGET_NAME-library)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
elif [ $EXT = "m" ]
then
    echo "add_library($DESIRED_TARGET_NAME-library source.m header.h)" >  "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_include_directories($DESIRED_TARGET_NAME-library PUBLIC ${CMAKE_CURRENT_SOURCE_DIRECTORY})" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_executable($DESIRED_TARGET_NAME main.m)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_link_libraries($DESIRED_TARGET_NAME LINK_PUBLIC $DESIRED_TARGET_NAME-library -framework Foundation -framework Cocoa -framework AppKit -framework CoreData)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
elif [ $EXT = "mm" ]
then
    echo "add_library($DESIRED_TARGET_NAME-librarycpp source.cpp header.hpp)" >  "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-librarycpp PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_include_directories($DESIRED_TARGET_NAME-librarycpp PUBLIC ${CMAKE_CURRENT_SOURCE_DIRECTORY})" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt" 
    echo "add_library($DESIRED_TARGET_NAME-library source.mm header.h)" >  "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_include_directories($DESIRED_TARGET_NAME-library PUBLIC ${CMAKE_CURRENT_SOURCE_DIRECTORY})" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_executable($DESIRED_TARGET_NAME main.mm)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
    echo "add_compile_options($DESIRED_TARGET_NAME-library PUBLIC -fblocks)" >> $CMAKE_DEST
    echo "target_link_libraries($DESIRED_TARGET_NAME LINK_PUBLIC $DESIRED_TARGET_NAME-library -framework Foundation -framework Cocoa -framework AppKit -framework CoreData)" >> "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
else
    echo "add_executable("$DESIRED_TARGET_NAME main.$EXT source.$EXT")" > "./src/$DESIRED_TARGET_NAME/CMakeLists.txt"
fi

echo "[Added $DESIRED_TARGET_NAME to ./src/$DESIRED_TARGET_NAME/CMakeLists.txt]"

## Run makebuilds so that CMake regenerates the build system with the new target
./makebuilds
echo "[Regenerated build system after $DESIRED_TARGET_NAME was added]"
